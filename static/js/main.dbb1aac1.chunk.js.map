{"version":3,"sources":["Flashcard.js","FlashcardList.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashcardList","flashcards","id","App","setFlashcards","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dbb1aac1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nexport default function Flashcard({ flashcard }) {\r\n  const [flip, setFlip] = useState(false)\r\n  const [height, setHeight] = useState('initial')\r\n\r\n  const frontEl = useRef()\r\n  const backEl = useRef()\r\n\r\n  function setMaxHeight() {\r\n    const frontHeight = frontEl.current.getBoundingClientRect().height\r\n    const backHeight = backEl.current.getBoundingClientRect().height\r\n    setHeight(Math.max(frontHeight, backHeight, 100))\r\n  }\r\n\r\n  useEffect(setMaxHeight, [\r\n    flashcard.question,\r\n    flashcard.answer,\r\n    flashcard.options,\r\n  ])\r\n  useEffect(() => {\r\n    window.addEventListener('resize', setMaxHeight)\r\n    return () => window.removeEventListener('resize', setMaxHeight)\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className={`card ${flip ? 'flip' : ''}`}\r\n      style={{ height: height }}\r\n      onClick={() => setFlip(!flip)}\r\n    >\r\n      <div className='front' ref={frontEl}>\r\n        {flashcard.question}\r\n        <div className='flashcard-options'>\r\n          {flashcard.options.map((option) => {\r\n            return (\r\n              <div className='flashcard-option' key={option}>\r\n                {option}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className='back' ref={backEl}>\r\n        {flashcard.answer}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Flashcard from './Flashcard'\r\n\r\nexport default function FlashcardList({ flashcards }) {\r\n  return (\r\n    <div className='list-wrap'>\r\n      <div className='card-grid'>\r\n        {flashcards.map((flashcard) => {\r\n          return <Flashcard flashcard={flashcard} key={flashcard.id} />\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport FlashcardList from './FlashcardList'\r\nimport './app.css'\r\nimport axios from 'axios'\r\n\r\nfunction App() {\r\n  const [flashcards, setFlashcards] = useState([])\r\n  const [categories, setCategories] = useState([])\r\n\r\n  const categoryEl = useRef()\r\n  const amountEl = useRef()\r\n\r\n  useEffect(() => {\r\n    axios.get('https://opentdb.com/api_category.php').then((res) => {\r\n      setCategories(res.data.trivia_categories)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {}, [])\r\n\r\n  function decodeString(str) {\r\n    const textArea = document.createElement('textarea')\r\n    textArea.innerHTML = str\r\n    return textArea.value\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    axios\r\n      .get('https://opentdb.com/api.php', {\r\n        params: {\r\n          amount: amountEl.current.value,\r\n          category: categoryEl.current.value,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setFlashcards(\r\n          res.data.results.map((questionItem, index) => {\r\n            const answer = decodeString(questionItem.correct_answer)\r\n            const options = [\r\n              ...questionItem.incorrect_answers.map((a) => decodeString(a)),\r\n              answer,\r\n            ]\r\n            return {\r\n              id: `${index}-${Date.now()}`,\r\n              question: decodeString(questionItem.question),\r\n              answer: answer,\r\n              options: options.sort(() => Math.random() - 0.5),\r\n            }\r\n          })\r\n        )\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className='header' onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='category'>Категория</label>\r\n          <select id='category' ref={categoryEl}>\r\n            {categories.map((category) => {\r\n              return (\r\n                <option value={category.id} key={category.id}>\r\n                  {category.name}\r\n                </option>\r\n              )\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='amount'>Количество вопросов</label>\r\n          <input\r\n            type='number'\r\n            id='amount'\r\n            min='1'\r\n            step='1'\r\n            defaultValue={12}\r\n            ref={amountEl}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <button className='btn'>Сгенерировать</button>\r\n        </div>\r\n      </form>\r\n      <div className='container'>\r\n        <FlashcardList flashcards={flashcards} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}